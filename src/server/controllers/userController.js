// Middleware for dealing with user business logic
import userModel from "../models/userModel.js";
import bcrypt from "bcrypt"

const userController = {
  // Generate answer combination
  signUp: async(req, res, next) => {
    try {
      const { username, password } = req.body;
      const newUser = new userModel({
        username,
        password
      });
      await newUser.save();
      res.status(201).send('Account created successfully.') // 201 = indicates new resource created
    } catch (err) {
      console.error(`Error in userController.signUp: ${err}`);

      // Check for unique key error, if so, return error message to client
      if (err.code === 11000) { // Error code 11000 generated by MongoDB when unique prop violated
        return res.status(409).json({ // 409 error for when client failed to create new resource
          message: 'Username already exists. Choose another one.'
        });
      }

      // Structured error object
      const errorInfo = {
        log: 'SignUp Error',
        status: 500,
        message: 'Failed to create account.',
        error: err.message
      };
      return next(errorInfo)
    };
  },

  signIn: async(req, res, next) => {
    try {
      const { username, password } = req.body;

      // Read database to see if username exists
      const user = await userModel.findOne( { username });

      // If user not found, send back err message to front-end to setError for client
      if (!user) {
        return res.status(404).json({ message: "Username not found." });
      }

      // If user found, compare passwords using bcrypt
      const correctPassword = await bcrypt.compare(password, user.password);
      if (!correctPassword){
        return res.status(400).json({ message: "Password is incorrect." });
      }

      // Set user ID in session, along with keeping username for client feedback
      req.session.userId = user._id;
      req.session.username = user.username; // Use to greet at homescreen and play page

      return res.status(200).json({ message: `Login successful. Welcome back, ${username}!` })

    } catch (err) {
      console.error(`Error in userController.signIn: ${err}`);
      // If MongoDB sends back unique key error, let client know username not unique
      if (err.code === 11000) {
        return res.status(409).json({ 
          message: 'Username already exists. Choose another one.'
        });
      }

      // Structured error object
      const errorInfo = {
        log: 'Sign In Error',
        status: 500,
        message: 'Failed to log in.',
        error: err.message
      };
      return next(errorInfo)
    };
  },
  logout: async(req, res, next) => {
    try {
      // Destroy session
      req.session.destroy(err => {
        if(err) {
          console.error(`Error in userController.logout: ${err}`);
          return res.status(500).json({ message: 'Failed to end session' });
        }
        res.clearCookie('connect.sid'); // Clear cookie
        return res.status(200).json({ message: 'Logout successful.'}) // Success message back to client
      })
    } catch (err) {
      console.error(`Error in userController.logout: ${err}`);

      // Structured error object
      const errorInfo = {
        log: 'Log Out Error',
        status: 500,
        message: 'Failed to log out.',
        error: err.message
      };
      next(errorInfo)
    };
  }
};

export default userController;